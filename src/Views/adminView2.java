/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import Database.Database;
import com.sun.glass.events.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
//import weka.classifiers.Classifier;

/**
 *
 * @author khopi
 */
public class adminView2 extends javax.swing.JFrame {
    
    
    Database db;
    Connection con;
    PreparedStatement pst;
    
    ArrayList<String[]> results2;
    
    Set<String> s;

    /**
     * Creates new form adminView2
     */
    
    //private static Classifier cls;
    
    
    public adminView2() {
        initComponents();
        this.setLocationRelativeTo(null); // to center the lgin form
        db = new Database();
        con = db.getConnection();
        
        s = new TreeSet<String>();
        s.add("January");
        s.add("February");
        s.add("March");
        s.add("April");
        s.add("May");
        s.add("June");
        s.add("July");
        s.add("August");
        s.add("September");
        s.add("October");
        s.add("November");
        s.add("December");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1registerminimize = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3registerclose = new javax.swing.JLabel();
        logOutLbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFinal = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        firstMonthTxtFld = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        firstYearTxtFld = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        secondMonthTxtFld = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        secondYearTxtFld = new javax.swing.JTextField();
        findTotalPerformance = new javax.swing.JButton();
        finalPerfoClearBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        backToAdminViewBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(900, 444));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(206, 104, 8));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(670, 110));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 110));
        jPanel1.setRequestFocusEnabled(false);

        jLabel1registerminimize.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1registerminimize.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1registerminimize.setText("-");
        jLabel1registerminimize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1registerminimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1registerminimizeMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Hello admin");

        jLabel3registerclose.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel3registerclose.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3registerclose.setText("x");
        jLabel3registerclose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3registerclose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3registercloseMouseClicked(evt);
            }
        });

        logOutLbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        logOutLbl.setForeground(new java.awt.Color(255, 255, 255));
        logOutLbl.setText("log out");
        logOutLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logOutLblMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(833, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(logOutLbl)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1registerminimize)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3registerclose)))
                .addGap(14, 14, 14))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(29, 29, 29)
                    .addComponent(jLabel2)
                    .addContainerGap(665, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3registerclose)
                    .addComponent(jLabel1registerminimize))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(logOutLbl)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(26, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addGap(33, 33, 33)))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 900, 110);

        jPanel2.setBackground(new java.awt.Color(42, 49, 66));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setMinimumSize(new java.awt.Dimension(670, 344));
        jPanel2.setPreferredSize(new java.awt.Dimension(900, 344));
        jPanel2.setLayout(null);

        jTableFinal.setBackground(new java.awt.Color(87, 100, 132));
        jTableFinal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "1st monthDuPercent", "2nd monthDuPercent", "duSuddenChange", "1st monthRate", "2nd monthRate", "Rate change", "Performance"
            }
        ));
        jScrollPane1.setViewportView(jTableFinal);
        if (jTableFinal.getColumnModel().getColumnCount() > 0) {
            jTableFinal.getColumnModel().getColumn(0).setResizable(false);
            jTableFinal.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTableFinal.getColumnModel().getColumn(3).setResizable(false);
            jTableFinal.getColumnModel().getColumn(3).setPreferredWidth(50);
            jTableFinal.getColumnModel().getColumn(4).setResizable(false);
            jTableFinal.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTableFinal.getColumnModel().getColumn(5).setResizable(false);
            jTableFinal.getColumnModel().getColumn(5).setPreferredWidth(40);
            jTableFinal.getColumnModel().getColumn(6).setResizable(false);
            jTableFinal.getColumnModel().getColumn(6).setPreferredWidth(20);
            jTableFinal.getColumnModel().getColumn(7).setResizable(false);
            jTableFinal.getColumnModel().getColumn(7).setPreferredWidth(40);
        }

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 880, 135);

        jLabel5.setForeground(new java.awt.Color(204, 204, 255));
        jLabel5.setText("1st month :");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(70, 190, 63, 16);

        firstMonthTxtFld.setBackground(new java.awt.Color(87, 100, 132));
        firstMonthTxtFld.setForeground(new java.awt.Color(204, 204, 255));
        firstMonthTxtFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                firstMonthTxtFldKeyReleased(evt);
            }
        });
        jPanel2.add(firstMonthTxtFld);
        firstMonthTxtFld.setBounds(150, 190, 109, 24);

        jLabel8.setForeground(new java.awt.Color(204, 204, 255));
        jLabel8.setText("year :");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(100, 220, 31, 16);

        firstYearTxtFld.setBackground(new java.awt.Color(87, 100, 132));
        firstYearTxtFld.setForeground(new java.awt.Color(204, 204, 255));
        firstYearTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstYearTxtFldActionPerformed(evt);
            }
        });
        jPanel2.add(firstYearTxtFld);
        firstYearTxtFld.setBounds(150, 220, 109, 24);

        jLabel6.setForeground(new java.awt.Color(204, 204, 255));
        jLabel6.setText("2nd month :");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(70, 270, 66, 16);

        secondMonthTxtFld.setBackground(new java.awt.Color(87, 100, 132));
        secondMonthTxtFld.setForeground(new java.awt.Color(204, 204, 255));
        secondMonthTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondMonthTxtFldActionPerformed(evt);
            }
        });
        secondMonthTxtFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                secondMonthTxtFldKeyReleased(evt);
            }
        });
        jPanel2.add(secondMonthTxtFld);
        secondMonthTxtFld.setBounds(150, 270, 110, 24);

        jLabel9.setForeground(new java.awt.Color(204, 204, 255));
        jLabel9.setText("year :");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(110, 300, 31, 16);

        secondYearTxtFld.setBackground(new java.awt.Color(87, 100, 132));
        secondYearTxtFld.setForeground(new java.awt.Color(204, 204, 255));
        secondYearTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondYearTxtFldActionPerformed(evt);
            }
        });
        jPanel2.add(secondYearTxtFld);
        secondYearTxtFld.setBounds(150, 300, 110, 24);

        findTotalPerformance.setBackground(new java.awt.Color(59, 158, 229));
        findTotalPerformance.setForeground(new java.awt.Color(0, 0, 0));
        findTotalPerformance.setText("ok");
        findTotalPerformance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findTotalPerformanceActionPerformed(evt);
            }
        });
        jPanel2.add(findTotalPerformance);
        findTotalPerformance.setBounds(300, 290, 44, 32);

        finalPerfoClearBtn.setBackground(new java.awt.Color(206, 28, 28));
        finalPerfoClearBtn.setForeground(new java.awt.Color(0, 0, 0));
        finalPerfoClearBtn.setText("clear");
        finalPerfoClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalPerfoClearBtnActionPerformed(evt);
            }
        });
        jPanel2.add(finalPerfoClearBtn);
        finalPerfoClearBtn.setBounds(370, 290, 59, 32);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 255));
        jLabel1.setText("Final Performance for between two months");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(10, 10, 320, 19);

        backToAdminViewBtn.setBackground(new java.awt.Color(206, 28, 28));
        backToAdminViewBtn.setForeground(new java.awt.Color(0, 0, 0));
        backToAdminViewBtn.setText("Back");
        backToAdminViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToAdminViewBtnActionPerformed(evt);
            }
        });
        jPanel2.add(backToAdminViewBtn);
        backToAdminViewBtn.setBounds(800, 290, 77, 32);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 110, 900, 360);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1registerminimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1registerminimizeMouseClicked

        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabel1registerminimizeMouseClicked

    private void jLabel3registercloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3registercloseMouseClicked

        System.exit(0);
    }//GEN-LAST:event_jLabel3registercloseMouseClicked

    private void firstYearTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstYearTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstYearTxtFldActionPerformed

    private void secondMonthTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondMonthTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_secondMonthTxtFldActionPerformed

    private void secondYearTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondYearTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_secondYearTxtFldActionPerformed

    private void findTotalPerformanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findTotalPerformanceActionPerformed


        String firstMonth = firstMonthTxtFld.getText();
        String firstYear = firstYearTxtFld.getText();
        String secondMonth = secondMonthTxtFld.getText();
        String secondYear = secondYearTxtFld.getText();
        

        String sql = "";
        ResultSet rs = null;
        ArrayList<User3> userList = new ArrayList<User3>();
        
        
            try
            
            {
                sql = "SELECT FIRST_MONTH.FULL_NAME, FIRST_MONTH_PERFORMANCE, SECOND_MONTH_PERFORMANCE, ROUND(((SECOND_MONTH_PERFORMANCE - FIRST_MONTH_PERFORMANCE)/FIRST_MONTH_PERFORMANCE),2) AS PERFORMANCE_CHANGE, FIRST_MONTH_RATE, SECOND_MONTH_RATE, ((SECOND_MONTH_RATE - FIRST_MONTH_RATE)/FIRST_MONTH_RATE) AS RATE_CHANGE "
                        + "FROM ("
                             + " SELECT ROUND(SUM(WORKED_HOURS)/(COUNT(WORKED_HOURS)*9)*100,2) AS FIRST_MONTH_PERFORMANCE, FULL_NAME"
                                + " FROM worked_time"
                                + " WHERE WORKED_MONTH = ? AND WORKED_YEAR = ?"
                                + " GROUP BY FULL_NAME"
                        + " ) AS FIRST_MONTH"
                    + " INNER JOIN"
                        + " ( "
                            + "SELECT ROUND(SUM(WORKED_HOURS)/(COUNT(WORKED_HOURS)*9)*100,2) AS SECOND_MONTH_PERFORMANCE, FULL_NAME"
                            + " FROM worked_time"
                            + " WHERE WORKED_MONTH = ? AND WORKED_YEAR = ?"
                            + " GROUP BY FULL_NAME"
                        + " ) AS SECOND_MONTH"
                        + " ON FIRST_MONTH.FULL_NAME = SECOND_MONTH.FULL_NAME"
                        + " INNER JOIN"
                        + " ( "
                            + "SELECT FULL_NAME, RATE AS FIRST_MONTH_RATE"
                            + " FROM monthlyrate"
                            + " WHERE MONTH = ?"
                        + " ) AS FIRST_MONTHLY_RATE"
                    + " ON FIRST_MONTH.FULL_NAME = FIRST_MONTHLY_RATE.FULL_NAME"
                    + " INNER JOIN"
                      + "("
                        + " SELECT FULL_NAME,RATE AS SECOND_MONTH_RATE"
                        + " FROM monthlyrate"
                        + " WHERE MONTH = ?"
                    + ") AS SECOND_MONTHLY_RATE"
                    + " ON SECOND_MONTH.FULL_NAME = SECOND_MONTHLY_RATE.FULL_NAME;";
                
                
                pst = con.prepareStatement(sql);

                pst.setString(1, firstMonth);
                pst.setString(2, firstYear);
                pst.setString(3, secondMonth);
                pst.setString(4, secondYear);
                pst.setString(5, firstMonth);
                pst.setString(6, secondMonth);

                rs = pst.executeQuery();
                User3 user;
                
                //float p;
                while(rs.next()){

                    String performance = null;
                    
                    if(rs.getFloat("RATE_CHANGE") == -0.6 || rs.getFloat("RATE_CHANGE") == -0.67
                            || rs.getFloat("RATE_CHANGE") == -0.75 || rs.getFloat("RATE_CHANGE") == -0.8){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.1){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.8){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 2){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 3){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == -0.5){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.1){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.7){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 2){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 3){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == -0.4){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 1){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.7){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 2){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 3){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == -0.33){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 1){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.6){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 2){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 3){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == -0.25){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 0.9){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.5){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 2){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 3){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == -0.2){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 0.9){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.4){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 2){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 3){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == 0){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 0.4){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.4){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 2){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 3){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == 0.25){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 0.3){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.3){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 2){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 3){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == 0.33){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 0.3){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.2){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 2){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 3){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == 0.5){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 0.3){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.2){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 2){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 3){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == 0.67){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 0.2){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.1){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.4){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 1.5){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == 1){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 0.1){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.1){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.4){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 1.5){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == 2){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 0){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.4){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 1.5){
                           performance = "EXCELLENT";
                       }
                    }else if(rs.getFloat("RATE_CHANGE") == 3){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= 0){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 0.4){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 1.3){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 1.4){
                           performance = "EXCELLENT";
                       }
                   }else if(rs.getFloat("RATE_CHANGE") == 4){
                       if(rs.getFloat("PERFORMANCE_CHANGE") <= -0.1){
                           performance = "LOW";
                       } else if(rs.getFloat("PERFORMANCE_CHANGE") <= 0.4){
                           performance = "AVERAGE";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") <= 0.9){
                           performance = "GOOD";
                       }else if(rs.getFloat("PERFORMANCE_CHANGE") >= 1){
                           performance = "EXCELLENT";
                       }
                   } 
                    
                    
                   user = new User3(rs.getString("FULL_NAME"),rs.getString("First_month_performance"),rs.getString("Second_month_performance"),rs.getFloat("PERFORMANCE_CHANGE"),rs.getInt("FIRST_MONTH_RATE"),rs.getInt("SECOND_MONTH_RATE"),rs.getFloat("RATE_CHANGE")
                           ,performance);
                           

              
                   userList.add(user);
                }


                DefaultTableModel model = (DefaultTableModel)jTableFinal.getModel();
                Object[] row = new Object[8];

                for(int i = 0; i < userList.size(); i++){
                    row[0] = userList.get(i).FULL_NAME;
                    row[1] = userList.get(i).First_month_performance+"%";
                    row[2] = userList.get(i).Second_month_performance+"%";
                    row[3] = userList.get(i).PERFORMANCE_CHANGE;
                    row[4] = userList.get(i).FIRST_MONTH_RATE;
                    row[5] = userList.get(i).SECOND_MONTH_RATE;
                    row[6] = userList.get(i).RATE_CHANGE;
                    row[7] = userList.get(i).finalPerformance;

                    model.addRow(row);
                }
                                                     
            }catch(SQLException ex) {
                System.out.println(ex.getMessage());
            }

        
        
        
    }//GEN-LAST:event_findTotalPerformanceActionPerformed

    private void finalPerfoClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalPerfoClearBtnActionPerformed
        
        DefaultTableModel dm = (DefaultTableModel)jTableFinal.getModel();
        while(dm.getRowCount() > 0)
        {
            dm.removeRow(0);
        }
    }//GEN-LAST:event_finalPerfoClearBtnActionPerformed

    private void logOutLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutLblMouseClicked
        
        new loginForm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logOutLblMouseClicked

    private void backToAdminViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToAdminViewBtnActionPerformed
       new adminView().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backToAdminViewBtnActionPerformed

    private void firstMonthTxtFldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_firstMonthTxtFldKeyReleased
        
        if(evt.getKeyCode() == KeyEvent.VK_BACKSPACE || evt.getKeyCode() == KeyEvent.VK_DELETE){
           
       }else{
          
            String to_check = firstMonthTxtFld.getText();
       int to_check_len = to_check.length();
       for(String data:s){
           
           String check_form_data = "";
           for(int i = 0; i < to_check_len; i++){
             
               if(to_check_len <= data.length()){
                   
                   check_form_data = check_form_data + data.charAt(i);
               }
           }
           
           if(check_form_data.equals(to_check)){
              firstMonthTxtFld.setText(data);
              firstMonthTxtFld.setSelectionStart(to_check_len);
              firstMonthTxtFld.setSelectionEnd(data.length());
              break;
           }
       }
       } 
    }//GEN-LAST:event_firstMonthTxtFldKeyReleased

    private void secondMonthTxtFldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_secondMonthTxtFldKeyReleased
        
        if(evt.getKeyCode() == KeyEvent.VK_BACKSPACE || evt.getKeyCode() == KeyEvent.VK_DELETE){
           
       }else{
          
            String to_check = secondMonthTxtFld.getText();
       int to_check_len = to_check.length();
       for(String data:s){
           
           String check_form_data = "";
           for(int i = 0; i < to_check_len; i++){
             
               if(to_check_len <= data.length()){
                   
                   check_form_data = check_form_data + data.charAt(i);
               }
           }
           
           if(check_form_data.equals(to_check)){
              secondMonthTxtFld.setText(data);
              secondMonthTxtFld.setSelectionStart(to_check_len);
              secondMonthTxtFld.setSelectionEnd(data.length());
              break;
           }
       }
       } 
    }//GEN-LAST:event_secondMonthTxtFldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminView2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminView2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminView2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminView2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adminView2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backToAdminViewBtn;
    private javax.swing.JButton finalPerfoClearBtn;
    private javax.swing.JButton findTotalPerformance;
    private javax.swing.JTextField firstMonthTxtFld;
    private javax.swing.JTextField firstYearTxtFld;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel1registerminimize;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3registerclose;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableFinal;
    private javax.swing.JLabel logOutLbl;
    private javax.swing.JTextField secondMonthTxtFld;
    private javax.swing.JTextField secondYearTxtFld;
    // End of variables declaration//GEN-END:variables
}
